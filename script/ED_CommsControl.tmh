
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_CommsControl.tmh (v5.0.0) ... supports Elite Dangerous (Odyssey)

// Refer Change Log.txt in same folder

/// LEGEND: 
// ========================================================================
// fnName()								refer to ED_Functions file
// initName()							refer to ED_Initialise file
// stfnName()							refer to ED_StateTracker file
// tgName()								refer to ED_Toggles file
// mName								refer to ED_Macros file
// MapKey statements					refer to ED_MapKeyAssignment file
// Global State and Boolean Defines		refer to ED_ScriptDefines file
// Global Game Key Bind Defines			refer to ED_GameBindings file 
// Global Variables						refer to ED_GlobalVars file
// User Config Settings					refer to ED_UserSettings file
// ========================================================================

// START

//////////////////////////////////
//////////////////////////////////
//								//
//			NOT TESTED			//
//								//
//////////////////////////////////
//////////////////////////////////

// For the purposes of this exercise I'm going to use the following;
//
// Channel 0:	All Voice Channels MUTED
// Channel 1:	Voice Attack
// Channel 2:	In game Voice Comms (Game = Elite Dangerous)
// Channel 3:	Discord or Team Speak etc
// Channel 4:	All Voice Channels OPEN

// Index:	Line		FUNCTION
//			Line 178:	initCommsChannels()
//			Line 111:	fnChannelSelect()
//			Line 142:	fnMicControl()
//			Line 250:	tgPTTMode()
//			Line 264:	fnCommStatus()
		
// Global Vars
// =================================================================================================== 
	define MuteChannel1			L_ALT+USB[0x3B]			// LALT+F2		(Map this to VoiceAttack and set to mute while key pressed)
	define MuteChannel2			L_ALT+USB[0x3A]			// LALT+F1		(Map this to E:D in game Voice Channel)
	define MuteChannel3			USB[0x5D]				// NUMPAD 5		(Map this to Team Speak/Discord/Twitch/OBS/Youtube)

// General

	define CHNLUP				1			// Channel UP
	define CHNLDN				0			// Channel DOWN 

// Radio Modes

	int PTTMode				=	0;			// PTT or TOGGLE:	0 = Press to OPEN, Release to CLOSE, 1 = Press to OPEN, Press to CLOSE
	int Channel				=	0;			// CHANNEL:			0 = Off, 1 = Internal, 2 = External-1, 3 = External-2, 4 = All Open

// Channel Selection						// Default: All channels OPEN

	int CH1 				=	1;			// 0 = muted, 1 = open
	int CH2					=	1;			// 0 = muted, 1 = open
	int	CH3 				=	1;			// 0 = muted, 1 = open
		
// Microphone status

	int mike				= 	0;			// 0 = muted, 1 = open

// Initialisation status

	int CommsInitialised	=	0;
		
// End Global Variables	

// =================================================================================================== 

//	FUNCTION:	Initialise Radio - Mute Everything

	int initCommsChannels()	{
	
		// Set Channel to 0
		Channel = 0;
		
		// Mute all channels

		ActKey(CHAIN(
				LOCK,
				PULSE+KEYON+MuteChannel1, D(),
				PULSE+KEYON+MuteChannel2, D(),
				PULSE+KEYON+MuteChannel3, D(),
				LOCK			
			)
		);

		// No Channels selected...Set Status to MUTE
		CH1 = 0;
		CH2 = 0;
		CH3 = 0;
		
		// Set microphone to mute
		mike = 0;
		
		// Set PTT Mode to TOGGLE 
		PTTMode = 1;
		
		CommsInitialised = 1;
		
	}

//	FUNCTION:	Channel selector (Mike Switch UP/DOWN)
//	Parameter:	Select. Valid = NEXT or PREVIOUS

	int fnChannelSelect(int Select) {
		
		if (Select == NEXT) Channel	= Channel + 1;
		else Channel 	= Channel - 1;
		
		if (Channel < 0) Channel = 4;
		if (Channel > 4) Channel = 0;
		
		if (Channel == 0) {		
			VoiceTxt = "All Channels muted";
		}
		if (Channel == 1) {				// Voice Attack 
			VoiceTxt = "Channel 1";
		}
		if (Channel == 2) {				// Internal 
			VoiceTxt = "Channel 2";
		}
		if (Channel == 3) {				//  External
			VoiceTxt = "Channel 3";
		}
		if (Channel == 4) {
			VoiceTxt = "All Channels Open";
		}
		
		printf("Comm Select:	%s\x0a", VoiceTxt);
		fnTextToSpeech(VoiceTxt);
	
	}
	
//	FUNCTION:	Controls the communications functions (Mike Switch PUSH)
//	Parameter:	PTT. Valid = ON or OFF 
	
	int fnMicControl(int PTT) {
		if (PTTMode == HOLD) {				// Hold To Talk
			if (PTT == ON) {
				mike = ON;
				printf("Mike = %d\x0a", mike);
			}
			else {							// Release to Mute 
				mike = OFF;
				printf("Mike = %d\x0a", mike);
			}
		}
		else {								// Toggle Talk/Mute 
			if (PTT == ON) {
				mike = !mike;
				printf("Mike = %d\x0a", mike);
			}
		}
		if (mike == ON) {
			if (Channel == 0) {
				if (CH1) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
					CH1 = 0;
				}
				if (CH2) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
					CH2 = 0;
				}
				if (CH3) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
					CH3 = 0;
				}
			}
			if (Channel == 1) {
				if (!CH1) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
					CH1 = 1;
				}
				if (CH2) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
					CH2 = 0;
				}
				if (CH3) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
					CH3 = 0;
				}
			}
			if (Channel == 2) {
				if (CH1) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
					CH1 = 0;
				}
				if (!CH2) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
					CH2 = 1;
				}
				if (CH3) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
					CH3 = 0;
				}
			}
			if (Channel == 3) {
				if (CH1) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
					CH1 = 0;
				}
				if (CH2) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
					CH2 = 0;
				}
				if (!CH3) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
					CH3 = 1;
				}
			}
			if (Channel == 4) {
				if (!CH1) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
					CH1 = 1;
				}
				if (!CH2) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
					CH2 = 1;
				}
				if (!CH3) {
					ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
					CH3 = 1;
				}
			}			
		}
		else {
			if (CH1) {
				ActKey(CHAIN(PULSE+KEYON+MuteChannel1, D()));
				CH1 = 0;
			}
			if (CH2) {
				ActKey(CHAIN(PULSE+KEYON+MuteChannel2, D()));
				CH2 = 0;
			}
			if (CH3) {
				ActKey(CHAIN(PULSE+KEYON+MuteChannel3, D()));
				CH3 = 0;
			}			
		}
	}
	

//	TOGGLE:	PTT Mode = HOLD or TOGGLE ON/OFF (S3+Short Mike Switch Press)
	
	int tgPTTMode() {
		int VoiceTxt;
		
		PTTMode = !PTTMode;
		if (PTTMode) 	VoiceTxt = "PTT Mode: Push To Talk";
		else			VoiceTxt = "PTT Mode: Toggle OPEN/CLOSE";

		fnVPOutput(VoiceTxt);
	}
	
// FUNCTION: Report Comms Status (S3+LONG Mike Switch Press)

	int fnCommStatus() {
		char s;
		Dim(&s, 64);
		s[0] = 0;
		
		int mic;
		if (mike)	mic = "open";
		else		mic = "muted";
		
		if (PTTMode)	VoiceTxt = "hold";
		else			VoiceTxt = "toggle";
		
		sprintf(&s, "PTT Mode %s, Channel %d, mike %s", VoiceTxt, Channel, mic);
		fnVPOutput(&s);
	}
		
// END
	