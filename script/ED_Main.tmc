
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file:	ED_Main.tmc 		v5.0.0
// Supports:	Elite Dangerous 	v4.0.0.102 (Odyssey)
// Requires:	TARGET 				v3.0.20.826
//				Joystick firmware	v12
//				Throttle firmware 	v23

// Refer Change Log.txt in parent folder

// LEGEND: 
// ========================================================================
// fnName()								refer to ED_Functions file
// initName()							refer to ED_Initialise file
// stfnName()							refer to ED_StateTracker file
// tgName()								refer to ED_Toggles file
// mName								refer to ED_Macros file
// MapKey statements					refer to ED_MapKeyAssignment file
// Global State and Boolean Defines		refer to ED_ScriptDefines file
// Global Game Key Bind Defines			refer to ED_GameBindings file 
// Global Variables						refer to ED_GlobalVars file
// User Config Settings					refer to ED_UserSettings file
// ========================================================================

// Index:	Line		FUNCTION
//			Line 56:	include statements
//			Line 83: 	int main()
//			Line 166:	int EventHandle()

// PREFACE
//
// This script is provided as is and without any warranties, explicit or implied.
//
// This package contains a single required '.tmc' file (this is it), a '.ttm' which defines MANY constants and variables used by the rest
// of the script ( = multiple '.tmh' files) in order to (hopefully) make the code easier to follow.
//
// Also included within the package is a change log to document where I've added features (intended and unintended!) and some sample 
// Windows batch files to assist in lanching ED, this script and any attendant apps you may wish to use at run time.
//
// I am not a proffessional coder/programmer, however the philosophy I've chosen for this script package is to try to keep the code
// within a '.tmh' file relevant to the function title.
//
// Indexes near the top of each file should assist in finding functions of interest.
 


// START

// -------------- //
// included files //
// -------------- //

include "target.tmh"

// 'target.tmh' include is mandatory.
// 		when loaded, target.tmh then includes "defines.tmh" and "hid.tmh"
// 		when loaded, hid.tmh then includes "sys.tmh"
//		...this ensures these critical files are loaded in the correct order
// The above .tmh files are bundled with the TARGET software.

// include "ED_Defines.ttm"				// The order that these files are 'included' matters
include "ED_ScriptDefines.ttm"			// The order that these files are 'included' matters
include "ED_GameBindings.ttm"
include "ED_GlobalVars.tmh"
include "ED_UserSettings.tmh"
include "ED_Macros.tmh"
include "ED_MapKeyAssignment.tmh"
include "ED_Initialise.tmh"
include "ED_Functions.tmh"
include "ED_StateTracker.tmh"
include "ED_Toggles.tmh"
include "ED_CommsControl.tmh"			// UNTESTED: ENABLE 'CommsModule' in UserSettings to use CommsControl and...
										// ... remove the comments in front of the initCommsChannels() call below.


// --------------- //
// program startup //
// --------------- //

	int main() {
	
		printf("\x0a\++	Exclude unwanted controllers	...	");					// Eliminates error messages relating to unfound devices
			
		Exclude(&HCougar);
		Exclude(&T16000);
		Exclude(&T16000L);
		Exclude(&JoystickF18);
		Exclude(&TWCSThrottle);
		Exclude(&TFRPHARudder);
		Exclude(&LMFD);
		Exclude(&RMFD);
		Exclude(&A320Pilot);
		Exclude(&A320Copilot);
		Exclude(&TCAQuadrant12);
		Exclude(&TCAQuadrant34);
		
		if (EnableTFRPRudder) {													// (see ED_UserSettings.tmh)
			Configure(&TFRPRudder, MODE_FILTERED);
		}
		else {
			Exclude(&TFRPRudder);
		}
		
		printf("done	++\x0a\x0a");
		printf("++	Connect our controllers ... \x0a\x0a");
		
		if(Init(&EventHandle)) return 1;
				
// ---------------------------------------- //
// Initialise LEDs, variables and functions //
// ---------------------------------------- //
	
		printf("\x0a\++	Initialise hardware	...	Start	++\x0a"); 

		SetShiftButton(&Joystick, S3, &Throttle, PSF, PSB);						// ** DO NOT TOUCH **  Joystick Nosewheel Switch (S3) = IO, Throttle pinky switch (PSF/PSB) = UMD

		SetKBRate(PulseTime, DelayTime);										// Base Settings 	(See ED_UserSettings.tmh)
		SetKBLayout(KBLayout);													//					(See ED_ScriptDefines.ttm)
	
		fnPIPMode(RESET);														// Reset PIPMode

		stfnMyStates(LOAD);														// Load my status variables
		
		fnLEDBrightness();														// Set initial LED Brightness levels
		initTextToSpeech();														// Initialise Text-To-Speech engine
		initSoundFX();															// Initialise Sound Effects engine
		
		fnCustomCommands();														// Initialise Custom Macros (See ED_Macros.tmh)
		
		if (CommsModule == ENABLED) {
			initCommsChannels();												// Initialise Communications Control
		}
		

// -------------------------- //
// Initialise Flight controls //
// -------------------------- //
		
		initJoystickAxis();
		initThrottleAxis();														// Includes Throttle "Friction Control" Slider
		initTFRPRudder();

		printf("\x0a\++	Initialise Hardware	...	Complete	++\x0a");

// -----------------//
// Check Game State //
// -----------------//

		printf("\x0a\++	Check Game state ...\x0a");
		
		stfnStartCheck();														// Check for vital files and game start
				
		if(Flags == 0) {
			printf("++	Waiting for Game to load...\x0a");	
			printf("\x0a\Script initialized and running @ %s \x0a", fnGetTOD());
		}

	}	
	
// end of int main()
	

	int EventHandle(int type, alias o, int x) {
		DefaultMapping(&o, x);
	}

// END
