
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_ScriptDefines.ttm (v5.0.0) ... supports Elite Dangerous (Odyssey)

// Below are the global, static, state and boolean definitions used within the script package
// Also contains global ststus.json integer variable flags for ease of maintenance and readability

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================================
// fnName()								refer to ED_Functions file
// initName()							refer to ED_Initialise file
// stfnName()							refer to ED_StateTracker file
// tgName()								refer to ED_Toggles file
// mName								refer to ED_Macros file
// MapKey statements					refer to ED_MapKeyAssignment file
// Global State and Boolean Defines		refer to ED_ScriptDefines file
// Global Game Key Bind Defines			refer to ED_GameBindings file 
// Global Variables						refer to ED_GlobalVars file
// User Config Settings					refer to ED_UserSettings file
// ========================================================================


						//  -- WARNING --  //

// Do not define a variable as ALT+F4 (L_ALT+USB[0x3D] or R_ALT+USB[0x3D])
// PULSE an ALT+F4 to the current active window will close it!

						//   -- NOTES --   //

// Assigning ALT+F3 results in a 'brrringg' noise in TARGET Script Editor/GUI 

// START

	define KBLayout 							KB_ENG					// Default Keyboard Layout. Options = KB_FR or KB_GER

//----------------------------------------------------------------------//
// SCRIPT VERSION VARIABLES                                             //
//----------------------------------------------------------------------//

	define VMajor		 						5						// Script Version Major Value			ie. 2.x.x
	define VMinor		 						0						// Script Version Minor Value			ie. x.3.x
	define VPoint								"0_BETA"				// Script Version Point Update			ie. x.x.4


//---------//
// Timings //
//---------//

	// These delay settings affect how fast the script executes key presses etc.
	// If you find the macros are dropping characters, then the delay is too short.
	// "LongPress" is a personal setting. I find a half second is about right for me.
	
	define 	PulseTime 			33						// PULSE+ Delay time (ms) - Used as key-hold-down time.
	define 	DelayTime 			100						// D() Delay time 	 (ms) - Used in macros as the time between releasing one key and pressing the next. Increase from 75 for Odyssey
	define 	LongPress	 		500						// Tempo Delay 		 (ms) - Used in Tempos. ie hold switch/button for 0.5 seconds for alternate function
	
	define 	DiscoDelay			6100					// Discovery scanner 'hold-trigger' timer (6.1 seconds)
	

//-------------------//
// PIPMAPPER DEFINES //
//-------------------//

	define SYS									1						// Used in fnPIPMapper for managing System  PIPs (see EDFunctions.tmh) (DO NOT modify!)
	define ENG									2						// Used in fnPIPMapper for managing Engine  PIPs (see EDFunctions.tmh) (DO NOT modify!)
	define WEP									3						// Used in fnPIPMapper for managing Weapon  PIPs (see EDFunctions.tmh) (DO NOT modify!)
	define MID									4						// Used in fnPIPMapper for managing Balance PIPs (see EDFunctions.tmh) (DO NOT modify!)

//------------------------------//
// REXEC and AutoRepeat Handles //
//------------------------------//

	define hPWSprimary							0						// Used in ED_Functions.tmh						- PWS fire option on primary trigger
	define hPWSsecondary						1						// Used in ED_Functions.tmh						- PWS fire option on secondary trigger
	define hReadStatusJson						2						// Used in ED_StateTracker.tmh					- main read ststus.json background loop
	define hSRStrobe							3						// Used in ED_Toggles.tmh						- Silent Running Strobe
	define hFSDCharge							4						// Used in ED_Toggles.tmh & ED_Functions.tmh	- FSD Charge detection
	define hMassLocked							5						// Used in ED_Toggles.tmh & ED_Functions.tmh	- FSD Masslocked check/retry
	define hSoundFX								6						// Used in  ED_MapKeyAssignment.tmh 			- PSF & PSB reminder sound

//----------------------------------------------------------------------//
// SCRIPT BOOLEAN and STATE DEFINES										//
//----------------------------------------------------------------------//
		
	define OFF									0
	define ON									1
	define STROBE								2						// Used in tgSilentRunning()
	
	define TRUE									1
	define FALSE								0
	
	define YES									1
	define NO									0
	
	define ENABLED								1
	define DISABLED								0
	
	define SET									1
	define RESET								0
	
	define NEXT									1
	define PREVIOUS								2
	
	define EXIT									0
	define ENTER								1

	define BASIC								0
	define FULL									1
	define CUSTOM								2
	
	define DEPLOY								1
	define RETRACT								0
	define RECOVER								0
	
	define DebugON								1
	define DebugOFF								0
	
	define NOCHANGE								0
	define INCREASE								1
	define DECREASE								2
	
	define FLOAT								0
	define INTEGER								1
	define STRING								2
	
	define NUL									0
	define NONE									0						// used for fnSetCurves()
	define MILD									1						// used for fnSetCurves()
	define MEDIUM								2						// used for fnSetCurves()
	define SLOW									3						// used for fnSetCurves()
	define SLOWEST								4						// used for fnSetCurves()
	define NOPRINT								0						// suppress console message
	define PRINT								1						// don't
	define SAVE									1						// used in stfnMyStates()
	define LOAD									0						// used in stfnMyStates()	

//-------------------------//
// STATUS.JSON FLAGS MASKS //
//-------------------------//

	define ED_Docked               	0x0000000000000001
	define ED_Landed               	0x0000000000000002
	define ED_LandingGearDown      	0x0000000000000004
	define ED_ShieldsUp            	0x0000000000000008

	define ED_Supercruise          	0x0000000000000010
	define ED_FlightAssistOff      	0x0000000000000020
	define ED_HardpointsDeployed   	0x0000000000000040
	define ED_InWing               	0x0000000000000080

	define ED_LightsOn             	0x0000000000000100
	define ED_CargoScoopDeployed   	0x0000000000000200
	define ED_SilentRunning        	0x0000000000000400
	define ED_ScoopingFuel         	0x0000000000000800

	define ED_SRVHandbrake         	0x0000000000001000
	define ED_SRVTurret            	0x0000000000002000
	define ED_SRVTurretRetracted   	0x0000000000004000
	define ED_SRVDriveAssist       	0x0000000000008000

	define ED_FSDMassLocked        	0x0000000000010000
	define ED_FSDCharging          	0x0000000000020000
	define ED_FSDCooldown          	0x0000000000040000
	define ED_LowFuel              	0x0000000000080000

	define ED_OverHeating          	0x0000000000100000
	define ED_HasLatLong           	0x0000000000200000
	define ED_IsInDanger           	0x0000000000400000
	define ED_BeingInterdicted     	0x0000000000800000

	define ED_InMainShip           	0x0000000001000000
	define ED_InFighter            	0x0000000002000000
	define ED_InSRV                	0x0000000004000000
	define ED_HudInAnalysisMode    	0x0000000008000000

	define ED_NightVision			0x0000000010000000
	define ED_AltFromAvgRad	    	0x0000000020000000
	define ED_FSDJump				0x0000000040000000	
	define ED_SRVHiBeam				0x0000000080000000	

//---------------------------------//
//  Corresponding Flags Variables  //
//---------------------------------//

	int Flags 					=	0;		// contains the Flags key value integer
	int OldFlags				=	0;		// track when Flags key value changes
	
	int fDocked					=	0;
	int fLanded					=	0;
	int fLandingGear			=	0;
	int fShieldsUp				=	0;
	int fSupercruise			=	0;
	int fFAOff					=	0;
	int fHardpoints				=	0;
	int fInWing					=	0;
	int fLights					=	0;
	int fCargoScoop				=	0;
	int fSilentRunning			=	0;
	int fFuelScoop				=	0;
	int fSRVHandbrake			=	0;
	int fSRVTurretView			=	0;
	int fSRVTurretRetracted		=	0;
	int fSRVDriveAssist			=	0;
	int fMassLocked				=	0;
	int fFSDCharging			=	0;
	int fFSDCooldown			=	0;
	int fLowFuel				=	0;
	int fOverHeating			=	0;
	int fLatLong				=	0;
	int fDanger					=	0;
	int fInterdicted			=	0;
	int fMainShip				=	0;
	int fFighter				=	0;
	int fSRV					=	0;
	int fHUDAnalysis			=	0;
	int fNightVision			=	0;
	int	fAltFromAvgRad			=	0;
	int fsdJump					=	0;
	int fSRVHiBeam				=	0;

//--------------------------//
// STATUS.JSON FLAGS2 MASKS //
//--------------------------//

	define ED_OnFoot               	0x0000000000000001
	define ED_InTaxi               	0x0000000000000002
	define ED_InMultiCrew	      	0x0000000000000004
	define ED_OnFootInStation      	0x0000000000000008

	define ED_OnFootOnPlanet       	0x0000000000000010
	define ED_AimDownSight      	0x0000000000000020
	define ED_LowOxygen			   	0x0000000000000040
	define ED_LowHealth            	0x0000000000000080

	define ED_Cold	             	0x0000000000000100
	define ED_Hot				   	0x0000000000000200
	define ED_VeryCold	        	0x0000000000000400
	define ED_VeryHot	         	0x0000000000000800
	
	define ED_GlideMode	         	0x0000000000001000
	define ED_OnFootInHanger       	0x0000000000002000
	define ED_OnFootSocialSpace	 	0x0000000000004000
	define ED_OnFootExterior     	0x0000000000008000

	define ED_BreathableAtmosphere 	0x0000000000010000
//	define ED_RESERVED          	0x0000000000020000
//	define ED_RESERVED          	0x0000000000040000
//	define ED_RESERVED             	0x0000000000080000

//	define ED_RESERVED          	0x0000000000100000
//	define ED_RESERVED           	0x0000000000200000
//	define ED_RESERVED           	0x0000000000400000
//	define ED_RESERVED     			0x0000000000800000

//	define ED_RESERVED           	0x0000000001000000
//	define ED_RESERVED            	0x0000000002000000
//	define ED_RESERVED              0x0000000004000000
//	define ED_RESERVED		    	0x0000000008000000

//	define ED_RESERVED				0x0000000010000000
//	define ED_RESERVED	    		0x0000000020000000
//	define ED_RESERVED				0x0000000040000000	
//	define ED_RESERVED				0x0000000080000000

//----------------------------------//
//  Corresponding Flags2 Variables  //
//----------------------------------//

	int Flags2					=	0;		// contains the Flags2 key value integer 
	int OldFlags2				=	0;		// track when Flags2 key value changes 
	
	int fOnFoot					=	0;
	int fInTaxi					=	0;
	int fInMultiCrew			=	0;	      
	int fOnFootInStation    	=	0;

	int fOnFootOnPlanet     	=	0;
	int fAimDownSight      		=	0;
	int fLowOxygen				=	0;
	int fLowHealth          	=	0;

	int fCold	            	=	0;
	int fHot					=	0;
	int fVeryCold	        	=	0;
	int fVeryHot	        	=	0;

	int fGlideMode				= 	0;
	int fOnFootInHanger			= 	0;
	int fOnFootSocialSpace		= 	0;
	int fOnFootExterior			= 	0;

	int fBreathableAtmosphere	= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;

//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;

//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;

//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;
//	int fRESERVED				= 	0;

//--------------------//
// GUIFocus Variables //
//--------------------//

	define GUI_None				0
	define GUI_SystemPanel		1
	define GUI_TargetPanel		2
	define GUI_CommsPanel		3
	define GUI_RolePanel		4
	define GUI_StationSvcs		5
	define GUI_GalaxyMap		6
	define GUI_SystemMap		7
	define GUI_OrreryMap		8
	define GUI_FSSMode			9
	define GUI_SAAMode			10
	define GUI_Codex			11

//	END