
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_Macros.ttm (v5.0.0) ... supports Elite Dangerous (Odyssey)

// Refer Change Log.txt in parent folder

// LEGEND: 
// ========================================================================
// fnName()								refer to ED_Functions file
// initName()							refer to ED_Initialise file
// stfnName()							refer to ED_StateTracker file
// tgName()								refer to ED_Toggles file
// mName								refer to ED_Macros file
// MapKey statements					refer to ED_MapKeyAssignment file
// Global State and Boolean Defines		refer to ED_ScriptDefines file
// Global Game Key Bind Defines			refer to ED_GameBindings file 
// Global Variables						refer to ED_GlobalVars file
// User Config Settings					refer to ED_UserSettings file
// ========================================================================

// Index:	Line			FUNCTION
//			Line 52:		fnCustomCommands()
//			Line 75: 		mRequestDock
//			Line 88: 		mDeploySRV
//			Line 100: 		mBoardShip
//			Line 119: 		mShowGameStats
//			Line 124: 		mFastModeSwitch0
//			Line 135: 		mFastModeSwitch1
//			Line 149: 		mFastModeSwitch2
//			Line 162: 		mReportCrimesToggle
//			Line 183: 		mNAVBeaconWing
//			Line 209: 		mNAVBeaconOff
//			Line 234: 		mEnterHanger
//			Line 249: 		mLaunch
//			Line 260:		mChangeColours


// START

	// Declare macros (must be declared as global)

	int	mRequestDock, mDeploySRV, mShowGameStats, mReportCrimesToggle, mNAVBeaconWing, mNAVBeaconOff;
	int	mFastModeSwitch0, mFastModeSwitch1, mFastModeSwitch2, mBoardShip, mEnterHanger, mLaunch, mChangeColours;

//---------------//			// MACROS Include a series of automated key presses to perform a specific task.
// CUSTOM MACROS //			// The actual keys pressed can be found within the 'ED_Defines.ttm' file.
//---------------//			// NOTE: Keys pressed are also defined within the game's bind file and MUST match what we're using here. 

	int fnCustomCommands() {

		// Being Lazy...I've put this here rather than create yet another function
		// Selects MapKey Assignment profile
		
		if (Flags == 0 & TrainingMode == ENABLED) {
			printf("\x0a\Training Mode Enabled\x0a");		
			if (AnnounceTraining) {
				fnTextToSpeech("Training mode enabled, press a button or switch to hear what it does");
			}
			TrainingMap();										// Selects Training MapKey Profile
		}
		else {
			printf("\x0a\Training Mode Disabled\x0a");			
			if (AnnounceTraining) {
				fnTextToSpeech("Training mode disabled. Enable this feature via E D User Settings file");
			}
			MainKeyMap();										// Selects Main Mapkey Profile if TrainingMode is disabled 
		}
		
		// Define macros...

		// MACRO: Auto-Docking Request
		mRequestDock = CHAIN(
			LOCK+PULSE+TargetPanel, D(500),						// 1, e, e, left, right, spc, left, q, q, 1
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UILeft, D(),
			PULSE+UIRight, D(),
			PULSE+UISelect, D(500),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: SRV - Deploy
		mDeploySRV = CHAIN(
			LOCK+PULSE+RolePanel, D(500),						// 3, down, spc, down, down, up, up, spc
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UISelect, D(500),
			LOCK);

		// MACRO: SRV - Board Ship								// Sometimes scrolling down past the "back" option wraps back to top and sometimes it doesn't
		mBoardShip = CHAIN(										// This needs further testing as previously, the menu pointer occassionally started at a different place
			LOCK+PULSE+RolePanel, D(250),						// 3, spc, down, down, down, down, down, up, up, spc
			PULSE+UISelect, D(1500),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),								// adding 5 extra 'down' in case the selector wraps back to top 
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIUp, D(200),
			PULSE+UIUp, D(200),									// should now be positioned at 'Board Ship'
//			PULSE+UISelect, D(500),								// remove comment if macro is reliable for you
			LOCK);

		// MACRO: Display the combined OSD FPS & Bandwidth meters
		mShowGameStats = CHAIN(
			PULSE+ShowFramerate, D(500),						// L_CTRL+F
			PULSE+ShowConnectionStatus);						// L_CTRL+B

		// MACRO: Menulog to OPEN
		mFastModeSwitch0 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0)		
			PULSE+MenuLog, D(500),								// p, up, spc, spc, <wait>, spc, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								// 	  changed/increased (6000ms is default)
			PULSE+UISelect, D(600),								// Select OPEN Mode
			LOCK);

		// MACRO: Menulog to PRIVATE GROUP
		mFastModeSwitch1 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0) <-- Required???
			PULSE+MenuLog, D(500),								// p, up, spc, spc, <wait>, spc, right, spc, spc, right, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								//    changed/increased
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),								// Selects Private Group
			LOCK);

		// MACRO: Menulog to SOLO
		mFastModeSwitch2 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0)		
			PULSE+MenuLog, D(500),								// p, up, spc, spc, <wait>, spc, right, right, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								//    changed/increased
			PULSE+UIRight, D(600),
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),								// Selects SOLO mode
			LOCK);

		// MACRO: Toggle 'Report Crimes' on/off
		mReportCrimesToggle = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, down, down, right, right, spc, left, left, up, up, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIRight, D(),
			PULSE+UIRight, D(),
			PULSE+UISelect, D(500),
			PULSE+UILeft, D(),		 							// send selector back to home position when done
			PULSE+UILeft, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Toggle 'Wingman Beacon' - TEAM				// Under additional testing for Odyssey
		mNAVBeaconWing = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, right, down, down, down, down, spc, down, spc, up, up, up, up, left, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIRight, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIRight, D(),
			PULSE+UIUp, D(),		 							// send selector back to home position when done <<-- TEST
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UILeft, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Toggle 'Wingman Beacon' - OFF					// Under additional testing for Odyssey
		mNAVBeaconOff = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, right, down, down, down, down, spc, spc, up, up, up, up, left, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIRight, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(750),								// Increase from 500 for Odyssey
			PULSE+UISelect, D(750),
			PULSE+UIRight, D(),
			PULSE+UIUp, D(),		 							// send selector back to home position when done <<-- TEST
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UILeft, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Enter hanger then facilities + refuel/repair/restock >>> NOTE: Re-code commented code for Odyssey
		mEnterHanger = CHAIN(
			LOCK,
			PULSE+UISelect, D(2000),							//Refuel
			PULSE+UIRight, D(),
			PULSE+UISelect, D(2000),							//Repair
			PULSE+UIRight, D(),
			PULSE+UISelect, D(2000),							//Restock
			PULSE+UIRight, D(),
			PULSE+UISelect, D(2000),							//Enter Hanger		
			PULSE+UIDown, D(),
			PULSE+UISelect, D(),								// Back			
			LOCK);
			
		// MACRO: Launch the ship (from Launchpad screen)
		// Issue: Rise time varies between ships and thruster power.
		mLaunch = CHAIN(
			LOCK+PULSE+UIDown, D(500),							// down, down, spc, (wait 20), R (hold for 1.5), L
			PULSE+UIDown, D(500),
			PULSE+UISelect, D(20000),
			DOWN+ThrustUp, D(1500),								// Hold down for 1.5
			UP+ThrustUp, D(500),
			PULSE+LandingGear, D(500),							// Retract gear
			PULSE+SetSpeed25,									// Forward 25%
			LOCK);
			
		// MACRO: Change Engine and Weapon Colours	
		mChangeColours = CHAIN(
			PULSE+EngineColour, D(250),
			PULSE+WeaponColour, D(250)
			);
			
	}	// End of fnCustomCommands()

// END
